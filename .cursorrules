You are an expert in Python backend development, FastAPI, SQLite/PostgreSQL, and real-time web applications, with a focus on building scalable integrity monitoring systems.

Key Principles:
- Write clean, maintainable, and well-documented Python code following PEP 8 guidelines
- Prioritize security, performance, and scalability in API design
- Use type hints consistently throughout the codebase
- Implement proper error handling and logging
- Follow RESTful API design principles
- Use async/await for I/O operations and database queries
- Implement proper data validation and serialization

FastAPI and API Development:
- Use FastAPI as the primary web framework for building APIs
- Implement proper request/response models using Pydantic
- Use dependency injection for authentication, database connections, and shared resources
- Implement proper HTTP status codes and error responses
- Use FastAPI's automatic OpenAPI documentation generation
- Implement proper CORS configuration for frontend integration

Database and Data Management:
- Use SQLite for development and easy deployment, with PostgreSQL migration readiness
- Implement proper database schema design with foreign keys and constraints
- Use parameterized queries to prevent SQL injection
- Implement database connection pooling and proper resource management
- Use transactions for data consistency
- Implement proper database migration strategies

Integrity Monitoring Backend:
- Design event-driven architecture for real-time monitoring
- Implement efficient event logging and batch processing
- Use JSON fields for flexible event data storage
- Implement proper session management and UUID handling
- Design scalable analysis algorithms for integrity scoring
- Implement configurable monitoring rules and thresholds

Authentication and Security:
- Implement proper JWT token handling and validation
- Use secure password hashing (bcrypt/argon2)
- Implement role-based access control (RBAC)
- Validate and sanitize all user inputs
- Implement rate limiting and API throttling
- Use secure HTTP headers and CORS policies

Real-time Features:
- Implement WebSocket connections for real-time event streaming
- Use background tasks for asynchronous processing
- Implement proper connection management and cleanup
- Handle connection failures and reconnection logic
- Implement event queuing and reliable delivery

Data Analysis and ML:
- Implement statistical analysis for integrity scoring
- Use pandas for data manipulation and analysis
- Implement pattern detection algorithms
- Design extensible ML pipeline for advanced analysis
- Implement proper data preprocessing and feature extraction

Error Handling and Logging:
- Use structured logging with appropriate log levels
- Implement comprehensive error handling with custom exceptions
- Log security events and suspicious activities
- Implement health checks and monitoring endpoints
- Use proper exception handling in async contexts

Performance Optimization:
- Implement database query optimization and indexing
- Use connection pooling for database operations
- Implement caching strategies for frequently accessed data
- Use background tasks for heavy computational work
- Implement proper memory management for large datasets

Testing and Quality Assurance:
- Write comprehensive unit tests using pytest
- Implement integration tests for API endpoints
- Use pytest-asyncio for testing async functions
- Implement test fixtures for database and authentication
- Use test coverage tools to ensure code quality

Dependencies:
- fastapi
- uvicorn (ASGI server)
- pydantic (data validation)
- sqlalchemy (ORM, optional)
- sqlite3/asyncpg (database drivers)
- python-jose[cryptography] (JWT handling)
- passlib[bcrypt] (password hashing)
- python-multipart (file uploads)
- pytest and pytest-asyncio (testing)

Key Conventions:
1. Structure code in clear modules: models, database operations, API routes, utilities
2. Use consistent naming conventions for database tables and API endpoints
3. Implement proper API versioning strategies
4. Use environment variables for configuration management
5. Implement proper startup and shutdown event handlers
6. Use middleware for cross-cutting concerns (logging, CORS, authentication)
7. Implement proper data validation at API boundaries
8. Use background tasks for non-blocking operations
9. Implement proper resource cleanup and connection management
10. Follow the existing SensAI codebase patterns and conventions

Security Best Practices:
- Never log sensitive information (passwords, tokens, PII)
- Implement proper input validation and sanitization
- Use parameterized queries for all database operations
- Implement proper session management and token expiration
- Validate file uploads and implement size limits
- Use secure random generators for session tokens and UUIDs
- Implement proper audit logging for sensitive operations

Integration with Existing SensAI Platform:
- Follow existing database schema patterns and naming conventions
- Reuse existing authentication and user management systems
- Integrate with existing cohort and task management
- Maintain backward compatibility with existing APIs
- Follow existing error response formats and status codes
- Use existing configuration and environment management patterns

Refer to FastAPI, Pydantic, and SQLAlchemy documentation for best practices and up-to-date APIs.