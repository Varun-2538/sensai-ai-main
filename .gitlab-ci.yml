stages:
  - build
  - deploy-staging
  - deploy-production
  - deploy-demo

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

deploy-staging:
  stage: deploy-staging
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_DEV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_DEV_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.ai.staging.yml $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEV_SERVER_IP:~/docker-compose.ai.staging.yml
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEV_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEV_SERVER_IP 'sudo docker compose -f docker-compose.ai.staging.yml down --rmi "all"'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEV_SERVER_IP 'sudo docker compose -f docker-compose.ai.staging.yml pull'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEV_SERVER_IP 'sudo docker compose -f docker-compose.ai.staging.yml up -d'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "staging" '
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "staging"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "staging"'

deploy-production:
  stage: deploy-production
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PROD_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_PROD_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.ai.production.yml $DEPLOY_PROD_SERVER_USERNAME@$DEPLOY_PROD_SERVER_IP:~/docker-compose.ai.production.yml
    - ssh $DEPLOY_PROD_SERVER_USERNAME@$DEPLOY_PROD_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh $DEPLOY_PROD_SERVER_USERNAME@$DEPLOY_PROD_SERVER_IP 'sudo docker compose -f docker-compose.ai.production.yml down --rmi "all"'
    - ssh $DEPLOY_PROD_SERVER_USERNAME@$DEPLOY_PROD_SERVER_IP 'sudo docker compose -f docker-compose.ai.production.yml pull'
    - ssh $DEPLOY_PROD_SERVER_USERNAME@$DEPLOY_PROD_SERVER_IP 'sudo docker compose -f docker-compose.ai.production.yml up -d'

  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "production"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "production"'

deploy-demo:
  stage: deploy-demo
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_DEV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$DEPLOY_DEMO_SERVER_IP" >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.ai.demo.yml $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP:~/docker-compose.ai.demo.yml
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml down --rmi "all"'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml pull'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml up -d'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "demos"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "demos"'
